import re
import telebot
import config
import utils
import datetime
from pgres import Database

bot = telebot.TeleBot(config.BOT_TOKEN)
db = Database()


@bot.message_handler(commands=['start'], func=lambda message: message.chat.type == "private")
def greet_new_user(message: telebot.types.Message):
    username = utils.get_user_name(message.from_user)
    available_groups = utils.get_groups_representation(db)
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç <b><i>{username}</i></b>!\n" \
                      f"–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å—Å–ø–∏–∞–Ω–∏–µ. \n"
    user = db.get_user(message.from_user.id)
    if user is not None:
        welcome_message += f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞ <b>{user[1]}</b>\n" \
                           f"‚¨áÔ∏è–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚¨áÔ∏è"
        bot.send_message(message.chat.id, welcome_message, parse_mode='html')
        get_today_schedule(message)
    else:
        welcome_message += f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø:\n" \
                           f"{available_groups}"
        buttons = utils.get_buttons_by_options(db.get_available_groups())
        bot.send_message(message.chat.id, welcome_message, parse_mode="html", reply_markup=buttons)


@bot.message_handler(commands=['help'], func=lambda message: message.chat.type == "private")
def show_help_info(message: telebot.types.Message):
    text = f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ–º–∞–Ω–¥ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å)\n" \
           f"‚öôÔ∏è /schedule - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n" \
           f"‚öôÔ∏è /change - —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É\n" \
           f"‚öôÔ∏è /groups - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['groups'], func=lambda message: message.chat.type == "private")
def show_available_groups(message: telebot.types.Message):
    available_groups = utils.get_groups_representation(db)
    text = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n" \
           f"{available_groups}"
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['change'])
def change_user_group(message: telebot.types.Message):
    user = db.get_user(message.from_user.id)
    if user is None:
        pass
    else:
        buttons = utils.get_buttons_by_options(db.get_available_groups())
        text = f"–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: {user[1]}\n" \
               f"–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"
        bot.send_message(message.chat.id, text, reply_markup=buttons)
        show_available_groups(message)


@bot.message_handler(regexp=r"\d{6,10}", func=lambda message: message.chat.type == "private")
def reg_user_group(message: telebot.types.Message):
    user_id = message.from_user.id
    if db.get_group(message.text) is None:
        buttons = utils.get_buttons_by_options(db.get_available_groups())
        bot.send_message(message.chat.id, "–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!\n–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n", reply_markup=buttons)
        show_available_groups(message)
    else:
        db.reg_user(user_id, message.text)
        bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞: <b>{message.text}\n</b>"
                                          f"‚¨áÔ∏è–í–æ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚¨áÔ∏è", parse_mode='html')
        get_today_schedule(message)


@bot.message_handler(commands=['schedule'], func=lambda message: message.chat.type == "private", )
def get_today_schedule(message: telebot.types.Message):
    if db.get_user_group(message.from_user.id) is None:
        buttons = utils.get_buttons_by_options(db.get_available_groups())
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!\n–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n", reply_markup=buttons)
        show_available_groups(message)
    else:
        text = utils.get_today_schedule(db, message.from_user.id)
        date_str = re.search(r"\d{2}.\d{2}.\d{4}", text).group(0)
        markup = utils.get_schedule_buttons(date_str)
        bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def move_to_selected_day(call: telebot.types.CallbackQuery):
    if db.get_user_group(call.from_user.id) is None:
        buttons = utils.get_buttons_by_options(db.get_available_groups())
        bot.send_message(call.message.chat.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!\n–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n", reply_markup=buttons)
        show_available_groups(call.message)
    else:
        date_str = call.data.split("-")[1]
        if date_str == "today":
            today = datetime.datetime.today()
            date_str = today.strftime('%d.%m.%Y')
        text = utils.get_one_date_from_str(db, call.from_user.id, date_str)
        buttons = utils.get_schedule_buttons(date_str)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              parse_mode='html',
                              reply_markup=buttons)


@bot.message_handler(content_types=['text'])
def process_text_message(message: telebot.types.Message):
    bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—éüò£")


if __name__ == '__main__':
    bot.polling(none_stop=True)
